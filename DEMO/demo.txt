DNX SETUP:
dnvm install latest
dnu use 1.0.0-beta7 -Persistent
dnu restore

SETUP:
- Chrome Tabs
  1. https://github.com/Azure/autorest
  2. http://swagger.io/
  3. https://github.com/Azure/azure-rest-api-specs
- New project in VS
- AutoRest solution



DEMO:
- AutoRest is a conceptual reincarnation of Hydra. However only the concept of code generation remained, everything else is new - new code, new name, new data source
    [DEMO] Show github page for AutoRest
- AutoRest is now open source and is shipped via nuget, chocolatey, and Visual Studio (kudos to Bala and his team for the integration)
- As part of re-writing Hydra we have made a decision to move away from Code DOM and do template based code generation based on Razor
- As a result code maintainability has improved significantly and the entry barrier for adding new languages by the community has significantly decreased
- By the way Razor rocks as it allowed us not only to improve processing time due to precompiled templates but it also gave us model intellisense and enabled template debugging
    [DEMO] Show AutoRest solution -> Ruby -> Templates -> Service Client Template
- As you can see after finalizing AutoRest core some time late this spring we now have 5 languages - C#, Java, NodeJS flavor of JavaScript, Ruby, and GO
    [DEMO] Let me show you generated code for a simple HelloWorld client
           - Show helloworld.json
           - Show generate.cmd
           - Run cmd> generate.cmd
           - Run cmd> helloworld\server\node app.js
             This will run the server that responds "hi" to the request
           - Run cmd> helloworld\csharp>dnx run
             Now we run autorest generated client in the shiny new ProjectK environment
           - Run cmd> helloworld\nodejs>node app.js
             Same using nodejs
           - Show other languages
- AutoRest is based on a community driven open standard for API definition called Swagger - for those who are not familiar with Swagger, it's like WSDL for REST defined in JSON or YAML
    [DEMO] Show swagger website
- Swagger is pretty cool in that it allows for vendor extensions which we've used for Azure to annotate certain APIs with additional behavior such as Long Running Operation or List Pagination
- Combined with tools like Swashbuckle Azure teams can produce REST client directly from the server code (of course to produce "nice" APIs certain server side annotations and configurations are required)
- As part of going open source and providing transparency to the community we have also opened Azure Swagger specs repo.
- So far we have onboarded 9 teams and are currently working on migrating all ARM based clients to Swagger
    [DEMO] Show Specs Repo
           - Antares (arm-web): this spec by the way is completely generated from the Web API using Swashbuckle
           - Other swagger specs are for now generated from Hydra specs using our migration tool
           - Resource: this one has been migrated from existing Hydra spec
           - Download raw spec
           - Go to VS project -> Add item -> Api App [DO NOT COMPILE CODE]
           - Show intellisense

- So here you go. Please check our github page and give it a try.
           
